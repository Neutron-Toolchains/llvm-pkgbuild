# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>

pkgname=clang
pkgver=15.0.6
pkgrel=1
pkgdesc="C language family frontend for LLVM"
arch=('x86_64')
url="https://clang.llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
depends=('llvm-libs' 'gcc' 'compiler-rt')
makedepends=('llvm' 'cmake' 'ninja' 'python-sphinx' 'python-recommonmark' 'ocaml-stdlib-shims')
options=('!debug' 'lto')
optdepends=('openmp: OpenMP support in clang with -fopenmp'
            'python: for scan-view and git-clang-format'
            'llvm: referenced by some clang headers')
provides=("clang-analyzer=$pkgver" "clang-tools-extra=$pkgver")
conflicts=('clang-analyzer' 'clang-tools-extra')
replaces=('clang-analyzer' 'clang-tools-extra')
_source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-$pkgver
source=($_source_base/clang-$pkgver.src.tar.xz
        $_source_base/clang-tools-extra-$pkgver.src.tar.xz
        $_source_base/llvm-$pkgver.src.tar.xz
        enable-fstack-protector-strong-by-default.patch
        0001-Mark-fopenmp-implicit-rpath-as-NoArgumentUnused.patch
        0001-clang-tools-extra-Make-test-dependency-on-LLVMHello-.patch)
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP')

prepare() {
  mv "$srcdir/clang-$pkgver.src" "${srcdir}/clang"
  mv "$srcdir/clang-tools-extra-$pkgver.src" "${srcdir}/clang-tools-extra"
  mv "${srcdir}/llvm-${pkgver}.src" "${srcdir}/llvm"
  patch -Np1 -i ../enable-fstack-protector-strong-by-default.patch
  patch -Np1 -i ../0001-Mark-fopenmp-implicit-rpath-as-NoArgumentUnused.patch
  patch -Np1 -i ../0001-clang-tools-extra-Make-test-dependency-on-LLVMHello-.patch
  patch -Np1 -i <(curl -s "https://src.fedoraproject.org/rpms/clang/raw/rawhide/f/0003-PATCH-clang-Don-t-install-static-libraries.patch")

  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    "$srcdir/clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py"

  cd clang
  mkdir build
}

build() {
  cd clang/build

  cmake -G Ninja -Wno-dev --log-level=NOTICE \
    -DBUILD_SHARED_LIBS=OFF \
    -DCLANG_BUILD_EXAMPLES:BOOL=OFF \
    -DCLANG_DEFAULT_LINKER=lld \
    -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
    -DCLANG_ENABLE_ARCMT:BOOL=ON \
    -DCLANG_ENABLE_STATIC_ANALYZER:BOOL=ON \
    -DCLANG_INCLUDE_DOCS:BOOL=ON \
    -DCLANG_INCLUDE_TESTS:BOOL=ON \
    -DCLANG_LINK_CLANG_DYLIB=ON \
    -DCLANG_PLUGIN_SUPPORT:BOOL=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_DOCDIR=share/doc \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DCMAKE_SKIP_RPATH:BOOL=ON \
    -DENABLE_LINKER_BUILD_ID:BOOL=ON \
    -DLLVM_BUILD_DOCS=ON \
    -DLLVM_BUILD_UTILS:BOOL=ON \
    -DLLVM_CMAKE_DIR="${srcdir}/llvm/cmake/llvm" \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DLLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR="${srcdir}/clang-tools-extra" \
    -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
    -DLLVM_LINK_LLVM_DYLIB:BOOL=ON \
    -DLLVM_MAIN_SRC_DIR="${srcdir}/llvm" \
    -DPYTHON_EXECUTABLE=python3 \
    -DSPHINX_WARNINGS_AS_ERRORS=OFF \
    "${srcdir}/clang"

  ninja -j"$(nproc --all)"
}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package() {
  cd "${srcdir}/clang/build"

  DESTDIR="$pkgdir" ninja install-distribution
  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"

  # Remove documentation sources
  rm -r "$pkgdir"/usr/share/doc/clang{,-tools}/html/{_sources,.buildinfo}

  # Move scanbuild-py into site-packages and install Python bindings
  local site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "$pkgdir/$site_packages"
  mv "$pkgdir"/usr/lib/{libear,libscanbuild} "$pkgdir/$site_packages/"
  cp -a ../bindings/python/clang "$pkgdir/$site_packages/"

  # Move analyzer scripts out of /usr/libexec
  mv "$pkgdir"/usr/libexec/* "$pkgdir/usr/lib/clang/"
  rmdir "$pkgdir/usr/libexec"
  sed -i 's|libexec|lib/clang|' \
    "$pkgdir/usr/bin/scan-build" \
    "$pkgdir/$site_packages/libscanbuild/analyze.py"

  # Compile Python scripts
  _python_optimize "$pkgdir/usr/share" "$pkgdir/$site_packages"
}

# vim:set ts=2 sw=2 et:
